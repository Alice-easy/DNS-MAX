# ===========================================
# DNS Max 生产环境 Docker Compose 配置 (Registry Version)
# ===========================================
# 此配置文件用于从容器镜像仓库拉取预构建的镜像
# 包括数据库、缓存、后端API、前端Web和反向代理

services:
  # ===========================================
  # PostgreSQL 数据库服务
  # ===========================================
  postgres:
    image: postgres:15-alpine
    container_name: dns-max-postgres
    restart: unless-stopped

    # 环境变量配置
    environment:
      POSTGRES_DB: dns_max
      POSTGRES_USER: dns_max_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dns_max_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      PGDATA: /var/lib/postgresql/data/pgdata

    # 数据卷挂载
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro

    # 网络端口（生产环境建议注释掉，仅容器内访问）
    ports:
      - "5432:5432"

    # 安全配置
    security_opt:
      - no-new-privileges:true

    # 资源限制
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

    # 健康检查
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dns_max_user -d dns_max"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

    # 自定义启动命令（性能优化）
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

    # 网络配置
    networks:
      - dns-max-backend

  # ===========================================
  # Redis 缓存服务
  # ===========================================
  redis:
    image: redis:7-alpine
    container_name: dns-max-redis
    restart: unless-stopped

    # 网络端口（生产环境建议注释掉）
    ports:
      - "6379:6379"

    # 数据卷挂载
    volumes:
      - redis_data:/data

    # 安全配置
    security_opt:
      - no-new-privileges:true

    # 资源限制
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

    # 健康检查
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

    # Redis 配置优化
    command: >
      redis-server
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save ""
      --appendonly no
      --tcp-keepalive 300

    # 网络配置
    networks:
      - dns-max-backend

  # ===========================================
  # 后端 API 服务
  # ===========================================
  backend:
    image: ghcr.io/alice-easy/dns-max/backend:latest
    container_name: dns-max-backend
    restart: unless-stopped

    # 环境变量配置
    environment:
      - DATABASE_URL=postgresql+asyncpg://dns_max_user:${POSTGRES_PASSWORD:-dns_max_password}@postgres:5432/dns_max
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your_super_secret_key_here_change_in_production}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-["http://localhost:3000","http://localhost:3001","http://frontend:3000"]}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - WORKERS_COUNT=${WORKERS_COUNT:-4}
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-true}

    # 额外环境变量文件
    env_file:
      - .env

    # 网络端口
    ports:
      - "8000:8000"

    # 依赖服务
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

    # 资源限制
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

    # 健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

    # 网络配置
    networks:
      - dns-max-backend
      - dns-max-frontend

  # ===========================================
  # 前端 Web 服务
  # ===========================================
  frontend:
    image: ghcr.io/alice-easy/dns-max/frontend:latest
    container_name: dns-max-frontend
    restart: unless-stopped

    # 环境变量配置
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000/api/v1}
      - NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME:-DNS Max}
      - NODE_ENV=production

    # 网络端口
    ports:
      - "3000:3000"

    # 数据卷挂载
    volumes:
      - frontend_cache:/app/.next/cache

    # 依赖服务
    depends_on:
      backend:
        condition: service_healthy

    # 安全配置
    security_opt:
      - no-new-privileges:true

    # 资源限制
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

    # 健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

    # 网络配置
    networks:
      - dns-max-frontend

  # ===========================================
  # Nginx 反向代理服务
  # ===========================================
  nginx:
    image: nginx:alpine
    container_name: dns-max-nginx
    restart: unless-stopped

    # 网络端口
    ports:
      - "80:80"
      - "443:443"

    # 数据卷挂载
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_cache:/var/cache/nginx

    # 依赖服务
    depends_on:
      - frontend
      - backend

    # 安全配置
    security_opt:
      - no-new-privileges:true

    # 资源限制
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.5"
        reservations:
          memory: 128M
          cpus: "0.25"

    # 健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

    # 网络配置
    networks:
      - dns-max-frontend

    # 标签（用于容器管理）
    labels:
      - "com.dns-max.service=nginx"
      - "com.dns-max.version=1.0.0"

# ===========================================
# 数据卷定义
# ===========================================
volumes:
  # 数据库数据
  postgres_data:
    driver: local

  # Redis 数据
  redis_data:
    driver: local

  # 前端缓存
  frontend_cache:
    driver: local

  # Nginx 缓存
  nginx_cache:
    driver: local

# ===========================================
# 网络定义
# ===========================================
networks:
  # 后端服务网络（数据库、缓存、API）
  dns-max-backend:
    driver: bridge
    internal: false # 允许外部访问，用于API调用外部DNS服务
    ipam:
      config:
        - subnet: 172.20.0.0/16

  # 前端服务网络（Web界面、代理）
  dns-max-frontend:
    driver: bridge
    internal: false
    ipam:
      config:
        - subnet: 172.21.0.0/16

# ===========================================
# 使用说明
# ===========================================
#
# 此 docker-compose.yml 配置用于从容器镜像仓库拉取预构建的镜像
#
# 1. 首次运行前，确保已登录到 GitHub Container Registry:
#    docker login ghcr.io
#
# 2. 拉取最新镜像:
#    docker-compose pull
#
# 3. 启动服务:
#    docker-compose up -d
#
# 4. 查看服务状态:
#    docker-compose ps
#
# 5. 查看日志:
#    docker-compose logs -f [service_name]
#
# 6. 停止所有服务:
#    docker-compose down
#
# 7. 更新镜像并重启:
#    docker-compose pull && docker-compose up -d
#
# ===========================================
# 安全注意事项
# ===========================================
#
# 1. 生产环境部署前请修改环境变量：
#    - POSTGRES_PASSWORD
#    - SECRET_KEY
#
# 2. 创建 .env 文件设置敏感配置
#
# 3. 生产环境建议关闭数据库和Redis的端口映射
#
# ===========================================