version: "3.8"

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: dns-max-postgres
    environment:
      POSTGRES_DB: dns_max
      POSTGRES_USER: dns_max_user
      POSTGRES_PASSWORD: dns_max_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dns_max_user -d dns_max"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: dns-max-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dns-max-backend
    environment:
      - DATABASE_URL=postgresql://dns_max_user:dns_max_password@postgres:5432/dns_max
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your_super_secret_key_here_change_in_production
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - BACKEND_CORS_ORIGINS=["http://localhost:3000","http://localhost:3001","http://frontend:3000"]
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # 前端Web服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dns-max-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: dns-max-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: dns-max-network
