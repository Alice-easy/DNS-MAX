services:
  postgres:
    image: postgres:15-alpine
    container_name: dns-max-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: dns_max
      POSTGRES_USER: dns_max_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dns_max_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dns_max_user -d dns_max"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - dns-max-backend

  redis:
    image: redis:7-alpine
    container_name: dns-max-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - dns-max-backend

  backend:
    build: ./backend
    container_name: dns-max-backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql+asyncpg://dns_max_user:${POSTGRES_PASSWORD:-dns_max_password}@postgres:5432/dns_max
      - SECRET_KEY=${SECRET_KEY:-your_super_secret_key_here_change_in_production}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-your_encryption_key_here_32_chars}
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - dns-max-backend
      - dns-max-frontend

  frontend:
    build: ./frontend
    container_name: dns-max-frontend
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000/api/v1}
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - dns-max-frontend

  nginx:
    image: nginx:alpine
    container_name: dns-max-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - dns-max-frontend

volumes:
  postgres_data:
  redis_data:

networks:
  dns-max-backend:
  dns-max-frontend:
