services:
  postgres:
    image: postgres:15-alpine
    container_name: dns-max-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dns_max}
      POSTGRES_USER: ${POSTGRES_USER:-dns_max_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dns_max_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-dns_max_user} -d ${POSTGRES_DB:-dns_max}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - dns-max-backend
    profiles:
      - docker-db  # 只有在docker-db profile时才启动

  redis:
    image: redis:7-alpine
    container_name: dns-max-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - dns-max-backend

  backend:
    build: ./backend
    container_name: dns-max-backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - USE_LOCAL_DB=${USE_LOCAL_DB:-false}
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - dns-max-backend
      - dns-max-frontend
    # 如果使用Docker数据库，则依赖postgres服务
    x-depends-on-postgres: &postgres-dependency
      postgres:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      args:
        NEXT_PUBLIC_API_URL: http://localhost:8000/api/v1
    container_name: dns-max-frontend
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - dns-max-frontend

volumes:
  postgres_data:
  redis_data:

networks:
  dns-max-backend:
  dns-max-frontend:
