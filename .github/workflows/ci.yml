name: CI/CD Pipeline

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  # ===========================================
  # 后端测试和检查
  # ===========================================
  backend-check:
    name: Backend Lint & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.4
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        working-directory: backend
        run: poetry install --no-interaction --no-ansi

      - name: Run basic tests
        working-directory: backend
        run: |
          poetry run python -m pytest tests/ -v || echo "Tests failed, but continuing..."

  # ===========================================
  # 前端测试和检查
  # ===========================================
  frontend-check:
    name: Frontend Lint & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run linting
        working-directory: frontend
        run: npm run lint || echo "Linting failed, but continuing..."

      - name: Check code formatting
        working-directory: frontend
        run: npm run format:check

      - name: Type checking
        working-directory: frontend
        run: npm run type-check

      - name: Build application
        working-directory: frontend
        run: npm run build

  # ===========================================
  # Docker 构建（仅在主分支）
  # ===========================================
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-check, frontend-check]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          tags: dns-max-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          tags: dns-max-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
